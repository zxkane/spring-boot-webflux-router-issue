buildscript {
	ext {
		springBootVersion = '2.0.0.M3'
	}
	repositories {
		// NOTE: You should declare only repositories that you need here
		mavenLocal()
		maven {
			name "aliyun1"
			url 'http://maven.aliyun.com/nexus/content/groups/public'
		}
		maven {
			name "aliyun2"
			url 'http://maven.aliyun.com/mvn/repository/'
		}
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'com.gradle.build-scan' version '1.8'
	id "com.gorylenko.gradle-git-properties" version "1.4.17"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'

buildScan {
	licenseAgreementUrl = 'https://gradle.com/terms-of-service'
	licenseAgree = 'yes'
}


version = '1.0.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenLocal()
	maven {
		name "aliyun1"
		url 'http://maven.aliyun.com/nexus/content/groups/public'
	}
	maven {
		name "aliyun2"
		url 'http://maven.aliyun.com/mvn/repository/'
	}
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


ext {
	springCloudVersion = 'Finchley.M1'
}

idea {
	module {
		inheritOutputDirs = false
		outputDir = file("$buildDir/classes/main/")
	}
}

jar {
	baseName = 'agent'
	version = '1.0.0'

	manifest {
		attributes 'Implementation-Title': baseName,
				'Implementation-Version': version,
				'Built-By': System.getProperty('user.name'),
				'Built-Date': new Date(),
				'Built-JDK': System.getProperty('java.version')
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.0.2'
}

sourceSets {
	integTest {
		java.srcDir file('src/integTest/java')
		resources.srcDir file('src/integTest/resources')
	}
}

task integTest(type: Test) {
	testClassesDirs = sourceSets.integTest.output.classesDirs
	classpath = sourceSets.integTest.runtimeClasspath
}

task integration(type: Test) {
	testClassesDirs = sourceSets.integTest.output.classesDirs
	classpath = sourceSets.integTest.runtimeClasspath
}

configurations {
	/**
	* see spring integration issue, https://jira.spring.io/browse/INT-4319
	*/
	all*.exclude group: 'com.fasterxml.jackson.module', module: 'jackson-module-kotlin'
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-actuator',
			'org.springframework.cloud:spring-cloud-starter-config',
			'org.springframework.boot:spring-boot-starter-data-mongodb-reactive',
			'org.springframework.boot:spring-boot-starter-data-redis-reactive',
			'org.springframework.boot:spring-boot-starter-integration',
			"org.springframework.integration:spring-integration-mongodb",
			'org.springframework.retry:spring-retry',
			'org.springframework.boot:spring-boot-starter-webflux',
			'org.springframework.boot:spring-boot-starter-tomcat',
			"org.springframework.boot:spring-boot-devtools",
			'com.fasterxml.jackson.datatype:jackson-datatype-joda',
			'joda-time:joda-time:2.9.9',
			'org.javamoney:moneta:1.0',
			'com.squareup.okhttp3:okhttp:3.8.1',
			'org.apache.commons:commons-lang3:3.5'
	compileOnly 'org.projectlombok:lombok:1.16.18'
	testCompile 'org.springframework.boot:spring-boot-starter-test',
			'io.projectreactor:reactor-test',
			'de.flapdoodle.embed:de.flapdoodle.embed.mongo'

	integTestCompile sourceSets.main.output
	integTestCompile configurations.testCompile
	integTestCompile sourceSets.test.output
	integTestRuntime configurations.testRuntime
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	// set heap size for the test JVM(s)
	maxHeapSize = "1024m"
	maxParallelForks = 1
	ignoreFailures true

	testLogging {
		// Show that tests are run in the command-line output
		events "started", "passed", "skipped", "failed"
	}
}